package actions

import (
	"fmt"
	"net/http"
	"rally/models"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
	"github.com/gofrs/uuid"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Comment)
// DB Table: Plural (comments)
// Resource: Plural (Comments)
// Path: Plural (/comments)
// View Template Folder: Plural (/templates/comments/)

// CommentsResource is the resource for the Comment model
type CommentsResource struct {
	buffalo.Resource
}

// List gets all Comments. This function is mapped to the path
// GET /comments
func (v CommentsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	postID, err := uuid.FromString(c.Param("post_id"))
	if err != nil {
		return nil
	}

	comments := &models.Comments{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Comments from the DB
	if err := q.Where("post_id = ?", postID).Order("created_at").Eager().All(comments); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)
		c.Set("comments", comments)
		return c.Render(http.StatusOK, r.HTML("/comments/index.plush.html"))
	}).Wants("javascript", func(c buffalo.Context) error {
		c.Set("comments", comments)
		c.Set("comment", &models.Comment{PostID: postID}) // Inline new comment form.
		return c.Render(http.StatusOK, r.JavaScript("/comments/index.plush.js"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(comments))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(comments))
	}).Respond(c)
}

// Show gets the data for one Comment. This function is mapped to
// the path GET /comments/{comment_id}
func (v CommentsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Comment
	comment := &models.Comment{}

	// To find the Comment the parameter comment_id is used.
	if err := tx.Find(comment, c.Param("comment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("comment", comment)

		return c.Render(http.StatusOK, r.HTML("/comments/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(comment))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(comment))
	}).Respond(c)
}

// New renders the form for creating a new Comment.
// This function is mapped to the path GET /comments/new
func (v CommentsResource) New(c buffalo.Context) error {
	c.Set("comment", &models.Comment{})

	return c.Render(http.StatusOK, r.HTML("/comments/new.plush.html"))
}

// Create adds a Comment to the DB. This function is mapped to the
// path POST /comments
func (v CommentsResource) Create(c buffalo.Context) error {
	// Allocate an empty Comment
	comment := &models.Comment{}

	// Bind comment to the html form elements
	if err := c.Bind(comment); err != nil {
		return err
	}

	// Set author
	currentUser, err := CurrentUser(c)
	if err != nil {
		return err
	}
	comment.AuthorID = currentUser.ID
	comment.Author = *currentUser
	postID, err := uuid.FromString(c.Param("post_id"))
	if err != nil {
		return err
	}

	comment.PostID = postID

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(comment)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("comment", comment)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/comments/new.plush.html"))
		}).Wants("javascript", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)
			c.Set("comment", comment)

			return c.Render(http.StatusUnprocessableEntity, r.JavaScript("/comments/failed.plush.js")) // TODO:
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "comment.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/comments/%v", comment.ID)
	}).Wants("javascript", func(c buffalo.Context) error {
		c.Set("comment", comment)
		return c.Render(http.StatusCreated, r.JavaScript("comments/created.js")) // TODO:
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(comment))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(comment))
	}).Respond(c)
}

// Edit renders a edit form for a Comment. This function is
// mapped to the path GET /comments/{comment_id}/edit
func (v CommentsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Comment
	comment := &models.Comment{}

	if err := tx.Find(comment, c.Param("comment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("comment", comment)
	return c.Render(http.StatusOK, r.HTML("/comments/edit.plush.html"))
}

// Update changes a Comment in the DB. This function is mapped to
// the path PUT /comments/{comment_id}
func (v CommentsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Comment
	comment := &models.Comment{}

	if err := tx.Find(comment, c.Param("comment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Comment to the html form elements
	if err := c.Bind(comment); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(comment)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("comment", comment)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/comments/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "comment.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/comments/%v", comment.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(comment))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(comment))
	}).Respond(c)
}

// Destroy deletes a Comment from the DB. This function is mapped
// to the path DELETE /comments/{comment_id}
func (v CommentsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Comment
	comment := &models.Comment{}

	// To find the Comment the parameter comment_id is used.
	if err := tx.Find(comment, c.Param("comment_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(comment); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "comment.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/comments")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(comment))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(comment))
	}).Respond(c)
}
